import { blogPlugin } from "vuepress-plugin-blog2";
import { getDate, timeTransformer } from "vuepress-shared/node";
import { checkFrontmatter } from "../frontmatter/check.js";
const defaultOptions = {
    article: "/article/",
    category: "/category/",
    categoryItem: "/category/:name/",
    tag: "/tag/",
    tagItem: "/tag/:name/",
    encrypted: "/encrypted/",
    slide: "/slide/",
    star: "/star/",
    timeline: "/timeline/",
};
const compareDate = (dateA, dateB) => {
    if (!dateA)
        return 1;
    if (!dateB)
        return -1;
    return dateB.getTime() - dateA.getTime();
};
const sorter = (pageA, pageB) => {
    const prevKey = pageA.frontmatter.sticky;
    const nextKey = pageB.frontmatter.sticky;
    if (prevKey && nextKey && prevKey !== nextKey)
        return Number(nextKey) - Number(prevKey);
    if (prevKey && !nextKey)
        return -1;
    if (!prevKey && nextKey)
        return 1;
    return compareDate(pageA.routeMeta["d" /* ArticleInfoType.date */], pageB.routeMeta["d" /* ArticleInfoType.date */]);
};
export const getBlogOptions = (options) => ({
    ...defaultOptions,
    ...(typeof options === "object" ? options : {}),
});
export const getBlogPlugin = (app, themeData, options, hotReload = false) => {
    if (!options)
        return null;
    const blogOptions = {
        ...defaultOptions,
        ...(typeof options === "object" ? options : {}),
    };
    const encryptedPaths = Object.keys(themeData.encrypt.config || {});
    return blogPlugin({
        metaScope: "",
        filter: blogOptions.filter ||
            (({ frontmatter, filePathRelative }) => {
                const pageFrontmatter = frontmatter;
                const isArticle = 
                // declaring this is an article
                pageFrontmatter.article ||
                    // generated from markdown files
                    Boolean(pageFrontmatter.article !== false && filePathRelative);
                const isSlide = isArticle && frontmatter.layout === "Slide";
                return isArticle || isSlide;
            }),
        getInfo: (page) => {
            const info = {};
            const frontmatter = page.frontmatter;
            const { filePathRelative, path } = page;
            const { createdTime } = page.data.git || {};
            const isArticle = 
            // declaring this is an article
            frontmatter.article ||
                // generated from markdown files
                Boolean(frontmatter.article !== false && filePathRelative);
            const isEncrypted = encryptedPaths.some((key) => decodeURI(path).startsWith(key));
            const isSlide = isArticle && frontmatter.layout === "Slide";
            checkFrontmatter(page, app.env.isDebug);
            // save page type to routeMeta
            info["y" /* ArticleInfoType.type */] = frontmatter.home
                ? "h" /* PageType.home */
                : isSlide
                    ? "s" /* PageType.slide */
                    : isArticle
                        ? "a" /* PageType.article */
                        : "p" /* PageType.page */;
            // resolve author
            if ("author" in frontmatter)
                info["a" /* ArticleInfoType.author */] = frontmatter.author;
            // resolve date
            if ("date" in frontmatter) {
                const date = getDate(page.frontmatter.date)?.value;
                if (date) {
                    info["d" /* ArticleInfoType.date */] = frontmatter.date;
                    info["l" /* ArticleInfoType.localizedDate */] = timeTransformer(date, {
                        lang: page.lang,
                        type: "date",
                    });
                }
            }
            else if (createdTime)
                info["d" /* ArticleInfoType.date */] = new Date(createdTime);
            // resolve category
            if ("category" in frontmatter)
                info["c" /* ArticleInfoType.category */] = frontmatter.category;
            // resolve tag
            if ("tag" in frontmatter)
                info["g" /* ArticleInfoType.tag */] = frontmatter.tag;
            // resolve sticky
            if ("sticky" in frontmatter)
                info["u" /* ArticleInfoType.sticky */] = frontmatter.sticky;
            // resolve image
            if ("cover" in frontmatter)
                info["v" /* ArticleInfoType.cover */] = frontmatter.cover;
            // resolve isOriginal
            if ("isOriginal" in frontmatter)
                info["o" /* ArticleInfoType.isOriginal */] = frontmatter.isOriginal;
            // resolve encrypted
            if (isEncrypted)
                info["n" /* ArticleInfoType.isEncrypted */] = true;
            // save page excerpt to routeMeta
            if (frontmatter.excerpt)
                info["e" /* ArticleInfoType.excerpt */] = frontmatter.excerpt;
            else if (page.data.excerpt)
                info["e" /* ArticleInfoType.excerpt */] = page.data.excerpt;
            else if (frontmatter.description)
                info["e" /* ArticleInfoType.excerpt */] = frontmatter.description;
            if (
            // reading time data is sensitive with markdown contents
            (hotReload || app.env.isBuild) &&
                // ensure a valid reading time exists
                page.data.readingTime &&
                page.data.readingTime.words !== 0)
                info["r" /* ArticleInfoType.readingTime */] = page.data.readingTime;
            return info;
        },
        category: [
            {
                key: "category",
                getter: ({ routeMeta, }) => routeMeta["c" /* ArticleInfoType.category */] || [],
                sorter,
                path: blogOptions.category,
                layout: "Blog",
                frontmatter: (localePath) => ({
                    title: themeData.locales[localePath].blogLocales.category,
                }),
                itemPath: blogOptions.categoryItem,
                itemFrontmatter: (name, localePath) => ({
                    title: `${name} ${themeData.locales[localePath].blogLocales.category}`,
                }),
                itemLayout: "Blog",
            },
            {
                key: "tag",
                getter: ({ routeMeta, }) => routeMeta["g" /* ArticleInfoType.tag */] || [],
                sorter,
                path: blogOptions.tag,
                layout: "Blog",
                frontmatter: (localePath) => ({
                    title: themeData.locales[localePath].blogLocales.tag,
                }),
                itemPath: blogOptions.tagItem,
                itemLayout: "Blog",
                itemFrontmatter: (name, localePath) => ({
                    title: `${name} ${themeData.locales[localePath].blogLocales.tag}`,
                }),
            },
        ],
        type: [
            {
                key: "article",
                sorter,
                filter: ({ frontmatter, }) => frontmatter.article !== false,
                path: blogOptions.article,
                layout: "Blog",
                frontmatter: (localePath) => ({
                    title: themeData.locales[localePath].blogLocales.article,
                }),
            },
            {
                key: "encrypted",
                sorter,
                filter: ({ routeMeta, }) => Boolean(routeMeta["n" /* ArticleInfoType.isEncrypted */]),
                path: blogOptions.encrypted,
                layout: "Blog",
                frontmatter: (localePath) => ({
                    title: themeData.locales[localePath].blogLocales.encrypt,
                }),
            },
            {
                key: "slide",
                sorter,
                filter: ({ routeMeta, }) => routeMeta["y" /* ArticleInfoType.type */] === "s" /* PageType.slide */,
                path: blogOptions.slide,
                layout: "Blog",
                frontmatter: (localePath) => ({
                    title: themeData.locales[localePath].blogLocales.slides,
                }),
            },
            {
                key: "star",
                sorter: (pageA, pageB) => {
                    const prevKey = pageA.frontmatter.star;
                    const nextKey = pageB.frontmatter.star;
                    if (prevKey && nextKey && prevKey !== nextKey)
                        return Number(nextKey) - Number(prevKey);
                    if (prevKey && !nextKey)
                        return -1;
                    if (!prevKey && nextKey)
                        return 1;
                    return compareDate(pageA.routeMeta["d" /* ArticleInfoType.date */], pageB.routeMeta["d" /* ArticleInfoType.date */]);
                },
                filter: ({ frontmatter, }) => Boolean(frontmatter.star),
                path: blogOptions.star,
                layout: "Blog",
                frontmatter: (localePath) => ({
                    title: themeData.locales[localePath].blogLocales.star,
                }),
            },
            {
                key: "timeline",
                sorter: (pageA, pageB) => compareDate(pageA.routeMeta["d" /* ArticleInfoType.date */], pageB.routeMeta["d" /* ArticleInfoType.date */]),
                filter: ({ frontmatter, routeMeta, }) => "d" /* ArticleInfoType.date */ in routeMeta &&
                    frontmatter["timeline"] !== false,
                path: blogOptions.timeline,
                layout: "Blog",
                frontmatter: (localePath) => ({
                    title: themeData.locales[localePath].blogLocales.timeline,
                }),
            },
        ],
        excerpt: true,
        excerptFilter: ({ frontmatter, path }) => {
            const isPageEncrypted = encryptedPaths.some((key) => decodeURI(path).startsWith(key));
            return !isPageEncrypted && !("excerpt" in frontmatter);
        },
        hotReload,
        ...("hotReload" in blogOptions ? { hotReload: blogOptions.hotReload } : {}),
    });
};
//# sourceMappingURL=blog.js.map
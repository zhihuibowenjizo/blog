{"version":3,"file":"blog.js","sourceRoot":"","sources":["../../../src/node/plugins/blog.ts"],"names":[],"mappings":"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","sourcesContent":["import { blogPlugin } from \"vuepress-plugin-blog2\";\nimport { getDate, timeTransformer } from \"vuepress-shared/node\";\nimport { checkFrontmatter } from \"../frontmatter/check.js\";\nimport { ArticleInfoType, PageType } from \"../../shared/index.js\";\n\nimport type { App, Page, Plugin } from \"@vuepress/core\";\nimport type { GitData } from \"@vuepress/plugin-git\";\nimport type { BlogOptions } from \"vuepress-plugin-blog2\";\nimport type {\n  ArticleInfo,\n  BlogPluginOptions,\n  ThemeData,\n  ThemePageData,\n  ThemeBlogHomePageFrontmatter,\n  ThemeProjectHomePageFrontmatter,\n  ThemeNormalPageFrontmatter,\n} from \"../../shared/index.js\";\n\nconst defaultOptions: BlogPluginOptions = {\n  article: \"/article/\",\n  category: \"/category/\",\n  categoryItem: \"/category/:name/\",\n  tag: \"/tag/\",\n  tagItem: \"/tag/:name/\",\n  encrypted: \"/encrypted/\",\n  slide: \"/slide/\",\n  star: \"/star/\",\n  timeline: \"/timeline/\",\n};\n\nconst compareDate = (\n  dateA: Date | undefined,\n  dateB: Date | undefined\n): number => {\n  if (!dateA) return 1;\n  if (!dateB) return -1;\n\n  return dateB.getTime() - dateA.getTime();\n};\n\nconst sorter = (\n  pageA: Page<\n    { git: GitData },\n    ThemeNormalPageFrontmatter,\n    { routeMeta: ArticleInfo }\n  >,\n  pageB: Page<\n    { git: GitData },\n    ThemeNormalPageFrontmatter,\n    { routeMeta: ArticleInfo }\n  >\n): number => {\n  const prevKey = pageA.frontmatter.sticky;\n  const nextKey = pageB.frontmatter.sticky;\n\n  if (prevKey && nextKey && prevKey !== nextKey)\n    return Number(nextKey) - Number(prevKey);\n  if (prevKey && !nextKey) return -1;\n  if (!prevKey && nextKey) return 1;\n\n  return compareDate(\n    pageA.routeMeta[ArticleInfoType.date],\n    pageB.routeMeta[ArticleInfoType.date]\n  );\n};\n\nexport const getBlogOptions = (\n  options?: BlogPluginOptions | boolean\n): BlogPluginOptions => ({\n  ...defaultOptions,\n  ...(typeof options === \"object\" ? options : {}),\n});\n\nexport const getBlogPlugin = (\n  app: App,\n  themeData: ThemeData,\n  options?: BlogPluginOptions | boolean,\n  hotReload = false\n): Plugin | null => {\n  if (!options) return null;\n\n  const blogOptions = {\n    ...defaultOptions,\n    ...(typeof options === \"object\" ? options : {}),\n  };\n  const encryptedPaths = Object.keys(themeData.encrypt.config || {});\n\n  return blogPlugin(<BlogOptions>{\n    metaScope: \"\",\n\n    filter:\n      blogOptions.filter ||\n      (({ frontmatter, filePathRelative }: Page<ThemePageData>): boolean => {\n        const pageFrontmatter = frontmatter as\n          | ThemeProjectHomePageFrontmatter\n          | ThemeBlogHomePageFrontmatter\n          | ThemeNormalPageFrontmatter;\n\n        const isArticle =\n          // declaring this is an article\n          pageFrontmatter.article ||\n          // generated from markdown files\n          Boolean(pageFrontmatter.article !== false && filePathRelative);\n\n        const isSlide = isArticle && frontmatter.layout === \"Slide\";\n\n        return isArticle || isSlide;\n      }),\n\n    getInfo: (page: Page<ThemePageData>) => {\n      const info: Record<string, unknown> = {};\n      const frontmatter = page.frontmatter as\n        | ThemeProjectHomePageFrontmatter\n        | ThemeBlogHomePageFrontmatter\n        | ThemeNormalPageFrontmatter;\n      const { filePathRelative, path } = page;\n      const { createdTime } = page.data.git || {};\n\n      const isArticle =\n        // declaring this is an article\n        frontmatter.article ||\n        // generated from markdown files\n        Boolean(frontmatter.article !== false && filePathRelative);\n      const isEncrypted = encryptedPaths.some((key) =>\n        decodeURI(path).startsWith(key)\n      );\n      const isSlide = isArticle && frontmatter.layout === \"Slide\";\n\n      checkFrontmatter(page, app.env.isDebug);\n\n      // save page type to routeMeta\n      info[ArticleInfoType.type] = frontmatter.home\n        ? PageType.home\n        : isSlide\n        ? PageType.slide\n        : isArticle\n        ? PageType.article\n        : PageType.page;\n\n      // resolve author\n      if (\"author\" in frontmatter)\n        info[ArticleInfoType.author] = frontmatter.author;\n\n      // resolve date\n      if (\"date\" in frontmatter) {\n        const date = getDate(page.frontmatter.date)?.value;\n\n        if (date) {\n          info[ArticleInfoType.date] = frontmatter.date;\n\n          info[ArticleInfoType.localizedDate] = timeTransformer(date, {\n            lang: page.lang,\n            type: \"date\",\n          });\n        }\n      } else if (createdTime)\n        info[ArticleInfoType.date] = new Date(createdTime);\n\n      // resolve category\n      if (\"category\" in frontmatter)\n        info[ArticleInfoType.category] = frontmatter.category;\n\n      // resolve tag\n      if (\"tag\" in frontmatter) info[ArticleInfoType.tag] = frontmatter.tag;\n\n      // resolve sticky\n      if (\"sticky\" in frontmatter)\n        info[ArticleInfoType.sticky] = frontmatter.sticky;\n\n      // resolve image\n      if (\"cover\" in frontmatter)\n        info[ArticleInfoType.cover] = frontmatter.cover;\n\n      // resolve isOriginal\n      if (\"isOriginal\" in frontmatter)\n        info[ArticleInfoType.isOriginal] = frontmatter.isOriginal;\n\n      // resolve encrypted\n      if (isEncrypted) info[ArticleInfoType.isEncrypted] = true;\n\n      // save page excerpt to routeMeta\n      if (frontmatter.excerpt)\n        info[ArticleInfoType.excerpt] = frontmatter.excerpt;\n      else if (page.data.excerpt)\n        info[ArticleInfoType.excerpt] = page.data.excerpt;\n      else if (frontmatter.description)\n        info[ArticleInfoType.excerpt] = frontmatter.description;\n\n      if (\n        // reading time data is sensitive with markdown contents\n        (hotReload || app.env.isBuild) &&\n        // ensure a valid reading time exists\n        page.data.readingTime &&\n        page.data.readingTime.words !== 0\n      )\n        info[ArticleInfoType.readingTime] = page.data.readingTime;\n\n      return info;\n    },\n\n    category: [\n      {\n        key: \"category\",\n        getter: ({\n          routeMeta,\n        }: Page<\n          { git: GitData },\n          ThemeNormalPageFrontmatter,\n          { routeMeta: ArticleInfo }\n        >) => routeMeta[ArticleInfoType.category] || [],\n        sorter,\n        path: blogOptions.category,\n        layout: \"Blog\",\n        frontmatter: (localePath) => ({\n          title: themeData.locales[localePath].blogLocales.category,\n        }),\n        itemPath: blogOptions.categoryItem,\n        itemFrontmatter: (name, localePath) => ({\n          title: `${name} ${themeData.locales[localePath].blogLocales.category}`,\n        }),\n        itemLayout: \"Blog\",\n      },\n      {\n        key: \"tag\",\n        getter: ({\n          routeMeta,\n        }: Page<\n          { git: GitData },\n          ThemeNormalPageFrontmatter,\n          { routeMeta: ArticleInfo }\n        >) => routeMeta[ArticleInfoType.tag] || [],\n        sorter,\n        path: blogOptions.tag,\n        layout: \"Blog\",\n        frontmatter: (localePath) => ({\n          title: themeData.locales[localePath].blogLocales.tag,\n        }),\n        itemPath: blogOptions.tagItem,\n        itemLayout: \"Blog\",\n        itemFrontmatter: (name, localePath) => ({\n          title: `${name} ${themeData.locales[localePath].blogLocales.tag}`,\n        }),\n      },\n    ],\n\n    type: [\n      {\n        key: \"article\",\n        sorter,\n        filter: ({\n          frontmatter,\n        }: Page<\n          { git: GitData },\n          ThemeNormalPageFrontmatter,\n          { routeMeta: ArticleInfo }\n        >) => frontmatter.article !== false,\n        path: blogOptions.article,\n        layout: \"Blog\",\n        frontmatter: (localePath) => ({\n          title: themeData.locales[localePath].blogLocales.article,\n        }),\n      },\n      {\n        key: \"encrypted\",\n        sorter,\n        filter: ({\n          routeMeta,\n        }: Page<\n          { git: GitData },\n          ThemeNormalPageFrontmatter,\n          { routeMeta: ArticleInfo }\n        >) => Boolean(routeMeta[ArticleInfoType.isEncrypted]),\n        path: blogOptions.encrypted,\n        layout: \"Blog\",\n        frontmatter: (localePath) => ({\n          title: themeData.locales[localePath].blogLocales.encrypt,\n        }),\n      },\n      {\n        key: \"slide\",\n        sorter,\n        filter: ({\n          routeMeta,\n        }: Page<\n          { git: GitData },\n          ThemeNormalPageFrontmatter,\n          { routeMeta: ArticleInfo }\n        >) => routeMeta[ArticleInfoType.type] === PageType.slide,\n        path: blogOptions.slide,\n        layout: \"Blog\",\n        frontmatter: (localePath) => ({\n          title: themeData.locales[localePath].blogLocales.slides,\n        }),\n      },\n      {\n        key: \"star\",\n        sorter: (\n          pageA: Page<\n            { git: GitData },\n            ThemeNormalPageFrontmatter,\n            { routeMeta: ArticleInfo }\n          >,\n          pageB: Page<\n            { git: GitData },\n            ThemeNormalPageFrontmatter,\n            { routeMeta: ArticleInfo }\n          >\n        ): number => {\n          const prevKey = pageA.frontmatter.star;\n          const nextKey = pageB.frontmatter.star;\n\n          if (prevKey && nextKey && prevKey !== nextKey)\n            return Number(nextKey) - Number(prevKey);\n          if (prevKey && !nextKey) return -1;\n          if (!prevKey && nextKey) return 1;\n\n          return compareDate(\n            pageA.routeMeta[ArticleInfoType.date],\n            pageB.routeMeta[ArticleInfoType.date]\n          );\n        },\n        filter: ({\n          frontmatter,\n        }: Page<\n          { git: GitData },\n          ThemeNormalPageFrontmatter,\n          { routeMeta: ArticleInfo }\n        >) => Boolean(frontmatter.star),\n        path: blogOptions.star,\n        layout: \"Blog\",\n        frontmatter: (localePath) => ({\n          title: themeData.locales[localePath].blogLocales.star,\n        }),\n      },\n      {\n        key: \"timeline\",\n        sorter: (\n          pageA: Page<\n            { git: GitData },\n            ThemeNormalPageFrontmatter,\n            { routeMeta: ArticleInfo }\n          >,\n          pageB: Page<\n            { git: GitData },\n            ThemeNormalPageFrontmatter,\n            { routeMeta: ArticleInfo }\n          >\n        ) =>\n          compareDate(\n            pageA.routeMeta[ArticleInfoType.date],\n            pageB.routeMeta[ArticleInfoType.date]\n          ),\n        filter: ({\n          frontmatter,\n          routeMeta,\n        }: Page<\n          { git: GitData },\n          ThemeNormalPageFrontmatter,\n          { routeMeta: ArticleInfo }\n        >) =>\n          ArticleInfoType.date in routeMeta &&\n          frontmatter[\"timeline\"] !== false,\n        path: blogOptions.timeline,\n        layout: \"Blog\",\n        frontmatter: (localePath) => ({\n          title: themeData.locales[localePath].blogLocales.timeline,\n        }),\n      },\n    ],\n\n    excerpt: true,\n\n    excerptFilter: ({ frontmatter, path }) => {\n      const isPageEncrypted = encryptedPaths.some((key) =>\n        decodeURI(path).startsWith(key)\n      );\n\n      return !isPageEncrypted && !(\"excerpt\" in frontmatter);\n    },\n\n    hotReload,\n    ...(\"hotReload\" in blogOptions ? { hotReload: blogOptions.hotReload } : {}),\n  });\n};\n"]}